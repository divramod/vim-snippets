snippet ld "logger.debug(``)" b
logger.debug(\`${1:}\`)
endsnippet

snippet ldd "logger.debug(`var: var`)" b
logger.debug(\`${1:}: \${$1}\`)
endsnippet

snippet li "logger.info(``)" b
logger.info(\`${1:}\`)
endsnippet

snippet lii "logger.info(`var: var`)" b
logger.info(\`${1:}: \${$1}\`)
endsnippet


snippet cll "console.log('', $)" b
console.log('$1', ${1:})
endsnippet

snippet cww "console.warn('', $)" b
console.warn('$1', ${1:})
endsnippet

snippet cj "console.log('', JSON)" b
console.log('$1', JSON.stringify(${1:}, null, 4))
endsnippet

snippet tfile "test file ava" b
import test from 'ava'
endsnippet

snippet v "${}" i
\${$0}
endsnippet

snippet c "${}" i
\`\${$0}\`
endsnippet

snippet t "" i
// TODO: ${1:}
endsnippet

snippet fu "function" i
const ${1:} = () => {

}

endsnippet
snippet fe "export function" i
export function ${1:}() {

}
endsnippet

snippet fa "export async function" i
async function ${1:}(): Promise<any> {

}
endsnippet

snippet fea "export async function" i
export async function ${1:}(): Promise<any> {

}
endsnippet

snippet iml "import lodash"
import { ${1} } from 'lodash'
endsnippet

snippet im "import"
import { ${2} } from '${1}'
endsnippet

snippet imm "import default"
import ${2} from '${1}'
endsnippet

snippet ex "export"
export { ${1} } from './${2}'
endsnippet

snippet d "destruct object"
const { ${1} } = ${2}
endsnippet

snippet r "require"
var ${1} = require('$1')
endsnippet

snippet imr "require moment"
var moment = require('moment')
endsnippet

snippet ims "require shelljs"
var sh = require('shelljs')
endsnippet

snippet tf "ava test file" i
import test from 'ava'

test('${1:}', async t => {
  t.is(false, true)
})
endsnippet

snippet te "ava test" i
test('${1:}', async t => {
  t.is(false, true)
})
endsnippet

snippet ti "it" i
it('${1:}', async () => {
	const res = await ${2:}(${3:})
	expect(res).toEqual(true)
})
endsnippet
